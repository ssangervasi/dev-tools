# [core]
#     excludesFile = ./shared.gitignore

[user]
    name = Sebastian Sangervasi
    email = villain@harmless.dev

[diff]
    renames = true
    indentHeuristic = on

[status]
    showUntrackedFiles = all

[branch]
    autosetupmerge = true

[merge]
    summary = true
    conflictstyle = diff3

[rebase]
    autosquash = true

[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto

[alias]
    # Meta!
    aliases = config --get-regexp alias

    # Adding
    a = add --all
    ass = add .
    ap = add --patch

    # Committing
    amen = commit --amend --no-edit
    fix = !git commit --fixup
    
    # Rebasing
    ri = rebase --interactive
    rc = rebase --continue
    ra = rebase --abort
    re = rebase --edit-todo
    # Rebase the "wat" stuff
    rat = !git ri $(git junction $@)

    # Checkouts
    co = checkout

    # Logging
    l = log --oneline -n 10 --no-merges
    la = log \
            -n 10 \
            --no-merges \
            --pretty=format:'%C(bold)%h%C(reset) %C(green)%an %C(dim)%ai%C(reset) [%C(magenta)%D%C(reset)] %s %N'
    lg = log --all --graph --abbrev-commit \
        --date=relative \
        --pretty=format:'%C(bold blue)%h - %C(reset)%C(green)(%ar)%C(reset) - %s %C(dim)- %an%C(reset)%C(yellow)%d'
    summarize = !"f() { git log --pretty='format:%B' --reverse $(git seq $@); }; f"
    lc = log -n1 --pretty=format:'%h'

    # All... through the day...
    i = config --get user.name
    me = config --get user.email
    mine = !git l --author=\"$(git i)\" $@

    # Diffing
    root-dir=rev-parse --show-toplevel
    dic = diff --cached
    junction = !"f() { git merge-base ${1:-$(git hamster show)} ${2:-HEAD}; }; f"
    wat = !"f() { git diff --name-status $(git seq $@); }; f"
    wut = !git diff ${1:-HEAD}
    stat = !!"f() { git diff --stat $(git seq $@); }; f"

    # Pushing
    pf = push --force-with-lease
    hoist = push -u origin HEAD

    # Status
    s = status -sb
    b = branch -v
    current = symbolic-ref --short HEAD
    gone = !git branch --format='%(if:equals=gone)%(upstream:track,nobracket)%(then)%(refname:short)%(end)' | grep '.'

    # Branching
    new = checkout -b 
    borrow = !git fetch origin "$1" && git checkout FETCH_HEAD -b 
    # Delete a local branch of it's been merged.
    finish = branch --delete
    # Delete a local branch no matter what.
    murder = branch --delete --force
    # Delete a remote branch on origin.
    desecrate = !git push origin ':'":$1"
    # Delete a branch and its remote on origin.
    annihilate = !git desecrate "$1" && git murder "$1"

    # GitHub `hub` command
    cmp = !hub compare

[fetch]
    prune = true

[pull]
    rebase = true

##
# Performance
[core]
	preloadIndex = true
	untrackedCache = true

[fetch]
	negotiationAlgorithm = skipping
	writeCommitGraph = true
    
[index]
	version = 4
