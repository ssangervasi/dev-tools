#!/usr/bin/env bash

# This script is similar to just running
# 	git log --pretty=oneline *FILE_PATH*
# The main difference is that files will be grouped under
# their "wats" heading

cd $(git root-dir)

is_grep="false"
is_commit_only="false"
is_help="false"

args=()
for arg in "$@"; do
	if [[ "${arg}" == "-g" ]]; then
		is_grep="true"
	elif [[ "${arg}" == "-c" ]]; then
		is_commit_only="true"
	elif [[ "${arg}" == "--help" || "${arg}" == "-h"  ]]; then
		is_help="true"
	else
		args+=("${arg}")
	fi
done

if [[ "${is_help}" == "true" ]]; then
	cat <<HELP
usage: git why [options] <pattern> [<ref_start>] [<ref_end>]
where:
	<pattern>	File path regex. Tested against modified files in range.
	<ref_*>		Range of commits. Defaults based on git-seq.
options:	
	-g	Grep <pattern> against the diffs of modified files instead of file paths.
	-c	Only print hashes of commits that matched.
	-h	Print this help.

HELP

	exit
fi


pattern="${args[0]}"
ref_start="${args[1]}"
ref_end="${args[2]}"
commit="${ref_start:-HEAD}"

git wats "${ref_start}" "${ref_end}" |
	while read line; do
		line_arr=(${line})
		prefix="${line_arr[0]}"
		path="${line_arr[1]}"

		if [[ "${prefix}" =~ ^[a-zA-Z0-9]{40} ]]; then
			commit="${prefix}"
			commit_line="${line}"
		elif [[ -n "${commit}" && -n "${path}" ]]; then
			match_line=""
			if [[ "${is_grep}" == "true" ]]; then
				diff=$(git diff -G "${pattern}" "${commit}^..${commit}" -- "${path}")
				if [[ -n "${diff}" ]]; then
					match_line="${line}"
				fi
			else
				if [[ "${path}" =~ ${pattern} ]]; then
					match_line="${line}"
				fi
			fi

			if [[ -n "${match_line}" ]]; then
				if [[ "${is_commit_only}" == "true" ]]; then
					echo "${commit}"
					break
				else
					if [[ -n "${commit_line}" ]]; then
						echo "${commit_line}";
					fi
					echo "${match_line}"
				fi
			fi
		fi
	done