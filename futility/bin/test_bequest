#!/bin/bash

source load_futility
source bequest

TEST_FAILURE=24

describe() {
	echo "${COLOR_BLUE}describe ${@}${COLOR_NC}"
}

it() {
	echo "${COLOR_LIGHT_BLUE}it ${@}${COLOR_NC}"
}

passed() {
	echo_success 'passed'
}

expect() {
	case "$2" in
		'to be')
			expect_to_be "$1" "$3"
			;;
		'to eq')
			expect_to_eq "$1" "$3"
			;;
		*)
			echo_error "What is '$2'?"
	esac
}

expect_to_be() {
	local actual_var="$1"
	local expected_var="$2"

	if [[ -z ${actual_var} || -z ${expected_var} ]]; then
		echo_error "expect 'to be' requires two variables"
		exit $TEST_FAILURE
	fi		

	# Gross?
	local actual="${!actual_var}"
	local expected="${!expected_var}"

	if [[ ${actual} != ${expected} ]]; then
		echo_error "Varible ${actual_var} was not ${expected_var}!"
		echo_error "expected: '${expected}'"
		echo_error "received: '${actual}'"
		exit $TEST_FAILURE
	fi
}

expect_to_eq() {
	local actual="$1"
	local expected="$2"

	if [[ ${actual} != ${expected} ]]; then
		echo_error "Values were not equal!"
		echo_error "expected: '${expected}'"
		echo_error "received: '${actual}'"
		exit $TEST_FAILURE
	fi
}

breakpoint() {
	echo '<breakpoint>'
	echo -n '> '
	while read cmd; do
		eval "$cmd"
		echo -n '> '
	done
	echo '</breakpoint>'
}

demo_will() {
	cat <<-INPUT
		acc_var+:-a|--acc
		key_var:-k|--key
		parser():--parsable
	INPUT
}

test() {
	test_parse_endowment
	test_write_will
	test_gift_signature_for_pattern
	# test_acc
}

test_parse_endowment() {
	describe 'parse_endowment'
	
	it 'parses an accumulator'
	(
		parse_endowment 'acc_var+:-a|--acc'

		expect "${gift}" 'to eq' 'acc_var'
		expect "${kind}" 'to eq' '+:'
		expect "${pattern}" 'to eq' '-a|--acc'
	) && passed

	it 'parses a keyword arg'
	(
		parse_endowment 'key_var:-k|--key'

		expect "${gift}" 'to eq' 'key_var'
		expect "${kind}" 'to eq' ':'
		expect "${pattern}" 'to eq' '-k|--key'
	) && passed

	it 'parses a function arg'
	(
		parse_endowment 'parser():--parseable'

		expect "${gift}" 'to eq' 'parser'
		expect "${kind}" 'to eq'  '():'
		expect "${pattern}" 'to eq' '--parseable'
	) && passed
}

test_write_will() {
	describe 'write_will'

	(
		will_file=$(mktemp)
		trap "rm ${will_file}" EXIT

		input_will=$(demo_will)
		write_will

		# cat <<-RESULT
		# 	input_will:
		# 	---
		# 	${input_will} 
		# 	---
		# 	will_file:
		# 	---
		# 	$(cat ${will_file})
		# 	---
		# RESULT

		if [[ ! $(grep 'gift acc_var' ${will_file}) ]]; then
			echo_error 'no acc_var'
			exit $TEST_FAILURE
		elif [[ ! $(grep 'gift key_var' ${will_file}) ]]; then
			echo_error 'no key_var'
			exit $TEST_FAILURE
		elif [[ ! $(grep 'gift parser' ${will_file}) ]]; then
			echo_error 'no parser'
			exit $TEST_FAILURE
		fi 
	) && passed
}

test_gift_signature_for_pattern() {
	describe 'gift_signature_for_pattern'
	(
		will_file=$(mktemp)
		trap "rm ${will_file}" EXIT

		input_will=$(demo_will)
		write_will

		it 'works for a short pattern'
		(
			sig_for_pattern=$(gift_signature_for_pattern '-a')
			expected_sig=$(sign 'acc_var')

			expect sig_for_pattern	'to be' expected_sig
		) && passed

		it 'works for a long pattern'
		(
			sig_for_pattern=$(gift_signature_for_pattern '--acc')
			expected_sig=$(sign 'acc_var')
			
			expect sig_for_pattern	'to be' expected_sig
		) && passed
	)
}

test_acc() {
	describe 'accumulator'

	local executor=$(
		bequest 'acc_var+:-a|--acc'
	)

	echo 'the executor'
	echo 'should not be blank'
	(
		echo "executor: $executor"
		if [[ -z $executor ]]; then
			echo_error "executor was blank"
		else
			passed
		fi
	)

	it 'counts no flags as zero'
	(
		$executor

		if [[ $acc_var != '0' ]]; then
			echo_error "acc_var was: '$acc_var'"
			echo_error "   expected: '0'"
			exit $TEST_FAILURE
		else
			passed
		fi
	)

	it 'counts a short flag as one'
	(
		echo_success "skipped"
	)
	it 'counts a long flag as one'
	(
		echo_success "skipped"
	)
	
	it 'counts a long and a short as two'
	(
		$executor -a --acc

		if [[ $acc_var != '2' ]]; then
			echo_error "acc_var was: '$acc_var'"
			echo_error "   expected: '2'"
			exit $TEST_FAILURE
		else
			passed
		fi
	)
}

test_full_bequest() {
	local input_will=$(demo_will | xargs)
	local executor=$(
		bequest ${input_will}
	)

	parser() {
		parsed="parsed-$1"
	}

	$executor \
		-a --acc \
		--key key-val \
		--parsable parsable-val

	if [[ $acc_var != '2' ]]; then
		echo_error "acc_var was: '$acc_var'"
		echo_error "   expected: '2'"
		return $TEST_FAILURE
	fi
	if [[ $key_var != 'key_val' ]]; then
		echo_error "key_var was: '$key_var'"
		echo_error "   expected: 'key_val'"
		return $TEST_FAILURE
	fi
	if [[ $parsed != 'parsed-parsable-val' ]]; then
		echo_error "parsed was: '$parsed'"
		echo_error "  expected: 'parsed-parsable-val'"
		return $TEST_FAILURE
	fi
}

test
