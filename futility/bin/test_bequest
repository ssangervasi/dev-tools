#!/bin/bash

source futility
source bequest

demo_will() {
	cat <<-INPUT
		acc_var+:-a|--acc
		key_var:-k|--key
		parser():--parsable
	INPUT
}

test() {
	test_parse_endowment
	test_write_will
	test_gift_signature_for_pattern
	test_end_to_end_bequest
	# test_acc
}

test_parse_endowment() {
	describe 'parse_endowment'

	it 'parses an accumulator'
	(
		parse_endowment 'acc_var+:-a|--acc'

		expect "${gift}" 'to eq' 'acc_var'
		expect "${kind}" 'to eq' '+:'
		expect "${pattern}" 'to eq' '-a|--acc'
	) && passed

	it 'parses a keyword arg'
	(
		parse_endowment 'key_var:-k|--key'

		expect "${gift}" 'to eq' 'key_var'
		expect "${kind}" 'to eq' ':'
		expect "${pattern}" 'to eq' '-k|--key'
	) && passed

	it 'parses a function arg'
	(
		parse_endowment 'parser():--parseable'

		expect "${gift}" 'to eq' 'parser'
		expect "${kind}" 'to eq'  '():'
		expect "${pattern}" 'to eq' '--parseable'
	) && passed
}

test_write_will() {
	describe 'write_will'

	(
		will_file=$(mktemp)
		trap "rm ${will_file}" EXIT

		input_will=$(demo_will)
		write_will

		# cat <<-RESULT
		# 	input_will:
		# 	---
		# 	${input_will}
		# 	---
		# 	will_file:
		# 	---
		# 	$(cat ${will_file})
		# 	---
		# RESULT

		if [[ ! $(grep 'gift acc_var' ${will_file}) ]]; then
			echo_error 'no acc_var'
			failed
		elif [[ ! $(grep 'gift key_var' ${will_file}) ]]; then
			echo_error 'no key_var'
			failed
		elif [[ ! $(grep 'gift parser' ${will_file}) ]]; then
			echo_error 'no parser'
			failed
		fi
	) && passed
}

test_gift_signature_for_pattern() {
	describe 'gift_signature_for_pattern'
	(
		will_file=$(mktemp)
		trap "rm ${will_file}" EXIT

		input_will=$(demo_will)
		write_will

		it 'works for a short pattern'
		(
			sig_for_pattern=$(gift_signature_for_pattern '-a')
			expected_sig=$(sign 'acc_var')

			expect sig_for_pattern	'to be' expected_sig
		) && passed

		it 'works for a long pattern'
		(
			sig_for_pattern=$(gift_signature_for_pattern '--acc')
			expected_sig=$(sign 'acc_var')

			expect sig_for_pattern	'to be' expected_sig
		) && passed
	)
}

test_acc() {
	describe 'accumulator'

	local executor=$(
		bequest 'acc_var+:-a|--acc'
	)

	echo 'the executor'
	echo 'should not be blank'
	(
		echo "executor: ${executor}"
		if [[ -z ${executor} ]]; then
			echo_error "executor was blank"
			failed
		fi
	) && passed

	it 'counts no flags as zero'
	(
		${executor}

		expect ${acc_var} 'to eq' '0'
	) && passed

	it 'counts a short flag as one'
	(
		echo_success "skipped"
	)
	it 'counts a long flag as one'
	(
		echo_success "skipped"
	)

	it 'counts a long and a short as two'
	(
		${executor} -a --acc

		expect ${acc_var} 'to eq' '2'
	) && passed
}

test_end_to_end_bequest() {
	describe 'end to end bequest'
	(
		input_will=$(demo_will | xargs)
		executor=$(bequest ${input_will})

		parser() {
			parsed_var="parsed-$1"
		}

		# expect
		if [[ ! -x ${executor} ]]; then
			'e'
		fi

		${executor} \
			-a --acc \
			--key key-val \
			--parsable parsable-val

		expect "${acc_var}" 'to eq' '2'
		expect "${key_var}" 'to eq' 'key-val'
		expect "${parsed_var}" 'to eq' 'parsed-parsable-val'
	) && passed
}

test
